/*
    Compile with:
    protoc --proto_path=/path/to/openbazaar3.0/orders/pb -I=./ --go_out=plugins=grpc:./ crawler.proto
*/

syntax = "proto3";

package pb;

import "google/protobuf/timestamp.proto";
import "listing.proto";

service obcrawler {

    // Subscribe is an RPC which streams new profiles and listings as they
    // are crawled. Note you should subscribe to this as soon as the crawler
    // starts as any data that is crawled while not subscribed will not be
    // resent until the node is crawled again.
    //
    // Also, search engines MUST respect the expiration and not return any
    // data which has expired.
    rpc Subscribe (SubscribeRequest) returns (stream UserData) {}

    // CrawlNode queues up a crawl of the given node.
    rpc CrawlNode(CrawlNodeRequest) returns (CrawlNodeResponse) {}

    // BanNode will prevent the node from being crawled in the future as
    // well as purge all cached/pinned files of this node from the crawler.
    rpc BanNode(BanNodeRequest) returns (BanNodeResponse) {}

    // UnbanNode will un-ban the provided node. It will not immediately
    // crawl the node again. If you want that call CrawlNode.
    rpc UnbanNode(UnbanNodeRequest) returns (UnbanNodeResponse) {}
}

// RPC MESSAGES
message SubscribeRequest {}

message UserData {
    oneof data {
        Profile profile = 1;
        SignedListing listing = 2;
    }
    google.protobuf.Timestamp expiration = 3;
}


message CrawlNodeRequest {
    string peer = 1;
}

message CrawlNodeResponse {}

message BanNodeRequest {
    string peer = 1;
}

message BanNodeResponse {}

message UnbanNodeRequest {
    string peer = 1;
}

message UnbanNodeResponse {}

// DATA MESSAGES
message Profile {
    string peerID = 1;
    string name   = 2;
    string handle = 3;
    string location = 4;
    string about    = 5;
    string shortDescription = 6;

    bool nsfw = 7;
    bool vendor = 8;
    bool moderator = 9;

    ModeratorInfo moderatorInfo = 10;
    ContactInfo contactInfo     = 11;

    ProfileColors colors = 12;

    ImageHashes avatarHashes = 13;
    ImageHashes headerHashes = 14;

    ProfileStats stats = 15;

    string publicKey = 16;

    repeated string storeAndForwardServers = 17;

    google.protobuf.Timestamp lastModified = 18;

    message ProfileColors {
        string primary       = 1;
        string secondary     = 2;
        string text          = 3;
        string highlight     = 4;
        string highlightText = 5;
    }

    message ContactInfo {
        string website                = 1;
        string email                  = 2;
        string phoneNumber            = 3;
        repeated SocialAccount social = 4;

        message SocialAccount {
            string type     = 1;
            string username = 2;
            string proof    = 3;
        }
    }

    message ProfileStats {
        uint32 followerCount = 1;
        uint32 followingCount = 2;
        uint32 listingCount   = 3;
        uint32 ratingCount    = 4;
        uint32 postCount      = 5;
        float averageRating   = 6;
    }

    message ImageHashes {
        string tiny     = 1;
        string small    = 2;
        string medium   = 3;
        string large    = 4;
        string original = 5;
        string filename = 6;
    }

    message ModeratorInfo {
        string description                 = 1;
        string termsAndConditions          = 2;
        repeated string languages          = 3;
        repeated string acceptedCurrencies = 4;
        ModeratorFee fee                   = 5;

        message ModeratorFee {
            CurrencyValue fixedFee = 1;
            float percentage       = 2;
            FeeType feeType        = 3;

            enum FeeType {
                FixedFee               = 0;
                PercentageFee          = 1;
                FixedPlusPercentageFee = 2;
            }
        }
    }

    message Currency {
        string code         = 1;
        uint32 divisibility = 2;
    }

    message CurrencyValue {
        Currency currency = 1;
        string amount     = 2;
    }
}
