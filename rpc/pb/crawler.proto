syntax = "proto3";

package pb;

import "google/protobuf/timestamp.proto";
import "countrycodes.proto";
import "common.proto";

service obcrawler {

    // Subscribe is an RPC which streams new profiles and listings as they
    // are crawled. Note you should subscribe to this as soon as the crawler
    // starts as any data that is crawled while not subscribed will not be
    // resent until the node is crawled again.
    //
    // Also, search engines MUST respect the expiration and not return any
    // data which has expired.
    rpc Subscribe (SubscribeRequest) returns (stream UserData) {}

    // CrawlNode queues up a crawl of the given node.
    rpc CrawlNode(CrawlNodeRequest) returns (CrawlNodeResponse) {}

    // BanNode will prevent the node from being crawled in the future as
    // well as purge all cached/pinned files of this node from the crawler.
    rpc BanNode(BanNodeRequest) returns (BanNodeResponse) {}

    // UnbanNode will un-ban the provided node. It will not immediately
    // crawl the node again. If you want that call CrawlNode.
    rpc UnBanNode(UnbanNodeRequest) returns (UnbanNodeResponse) {}
}

// RPC MESSAGES
message SubscribeRequest {}

message UserData {
    oneof data {
        Profile profile = 1;
        SignedListing listing = 2;
    }
    google.protobuf.Timestamp expiration = 3;
}

message CrawlNodeRequest {
    string peer = 1;
}

message CrawlNodeResponse {}

message BanNodeRequest {
    string peer = 1;
}

message BanNodeResponse {}

message UnbanNodeRequest {
    string peer = 1;
}

message UnbanNodeResponse {}

// DATA MESSAGES
message Profile {
    string peerID = 1;
    string name   = 2;
    string handle = 3;
    string location = 4;
    string about    = 5;
    string shortDescription = 6;

    bool nsfw = 7;
    bool vendor = 8;
    bool moderator = 9;

    ModeratorInfo moderatorInfo = 10;
    ContactInfo contactInfo     = 11;

    ProfileColors colors = 12;

    ImageHashes avatarHashes = 13;
    ImageHashes headerHashes = 14;

    ProfileStats stats = 15;

    string publicKey = 16;

    repeated string storeAndForwardServers = 17;

    google.protobuf.Timestamp lastModified = 18;

    message ProfileColors {
        string primary       = 1;
        string secondary     = 2;
        string text          = 3;
        string highlight     = 4;
        string highlightText = 5;
    }

    message ContactInfo {
        string website                = 1;
        string email                  = 2;
        string phoneNumber            = 3;
        repeated SocialAccount social = 4;

        message SocialAccount {
            string type     = 1;
            string username = 2;
            string proof    = 3;
        }
    }

    message ProfileStats {
        uint32 followerCount = 1;
        uint32 followingCount = 2;
        uint32 listingCount   = 3;
        uint32 ratingCount    = 4;
        uint32 postCount      = 5;
        float averageRating   = 6;
    }

    // ImageHashes holds image hashes.
    message ImageHashes {
        string tiny     = 1;
        string small    = 2;
        string medium   = 3;
        string large    = 4;
        string original = 5;
        string filename = 6;
    }

    message ModeratorInfo {
        string description                 = 1;
        string termsAndConditions          = 2;
        repeated string languages          = 3;
        repeated string acceptedCurrencies = 4;
        ModeratorFee fee                   = 5;

        message ModeratorFee {
            CurrencyValue fixedFee = 1;
            float percentage       = 2;
            FeeType feeType        = 3;

            enum FeeType {
                FixedFee               = 0;
                PercentageFee          = 1;
                FixedPlusPercentageFee = 2;
            }
        }
    }
}

message Listing {
    string slug                             = 1;
    ID vendorID                             = 2;
    Metadata metadata                       = 3;
    Item item                               = 4;
    repeated ShippingOption shippingOptions = 5;
    repeated Tax taxes                      = 6;
    repeated Coupon coupons                 = 7;
    repeated string moderators              = 8;
    string termsAndConditions               = 9;
    string refundPolicy                     = 10;

    message Metadata {
        uint32 version                     = 1;
        ContractType contractType          = 2;
        Format format                      = 3;
        google.protobuf.Timestamp expiry   = 4;
        repeated string acceptedCurrencies = 5;
        string language                    = 6;
        uint32 escrowTimeoutHours          = 7;
        Currency pricingCurrency           = 9;

        enum ContractType {
            PHYSICAL_GOOD  = 0;
            DIGITAL_GOOD   = 1;
            SERVICE        = 2;
            CLASSIFIED     = 3;
            CRYPTOCURRENCY = 4;
        }

        enum Format {
            FIXED_PRICE  = 0;
            MARKET_PRICE = 1;
        }
    }

    message Item {
        string title                     = 1;
        string description               = 2;
        string processingTime            = 3;
        bool nsfw                        = 4;
        repeated string tags             = 5;
        repeated Image images            = 6;
        repeated string categories       = 7;
        float grams                      = 8;
        string condition                 = 9;
        repeated Option options          = 10;
        repeated Sku skus                = 11;
        string price                     = 12;
        string cryptoListingCurrencyCode = 13;
        float cryptoListingPriceModifier = 14;

        message Option {
            string name                = 1;
            string description         = 2;
            repeated Variant variants  = 3;

            message Variant {
                string name = 1;
                Image image = 2;
            }
        }

        message Sku {
            repeated Selection selections = 1;
            string productID              = 2;
            string quantity               = 3;
            string surcharge              = 4;

            message Selection {
                string option = 1;
                string variant = 2;
            }
        }

        message Image {
            string filename = 1;
            string original = 2;
            string large    = 3;
            string medium   = 4;
            string small    = 5;
            string tiny     = 6;
        }
    }

    message ShippingOption {
        string name                  = 1;
        ShippingType type            = 2;
        repeated CountryCode regions = 3;
        repeated Service services    = 4;

        enum ShippingType {
            LOCAL_PICKUP = 0;
            FIXED_PRICE  = 1;
        }

        message Service {
            string name                = 1;
            string estimatedDelivery   = 2;
            string price               = 3;
            string additionalItemPrice = 4;
        }
    }

    message Tax {
        string taxType                  = 1;
        repeated CountryCode taxRegions = 2;
        bool taxShipping                = 3;
        float percentage                = 4;
    }

    message Coupon {
        string title = 1;
        oneof code {
            string hash         = 2;
            string discountCode = 3;
        }
        oneof discount {
            float percentDiscount = 4;
            string priceDiscount  = 5;
        }
    }
}

message SignedListing {
    Listing listing     = 1;
    string cid          = 2;
    bytes signature     = 3;
}
