// Code generated by go-bindata.
// sources:
// sample-obcrawler.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleObcrawlerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x5d\x6f\x1b\xbb\x11\x7d\xd7\xaf\x98\x87\x04\x68\x01\x55\x1f\x76\xda\xa2\x56\x55\x40\x8e\x1d\x54\xb0\x13\x0b\x96\xf3\x81\xbc\xcd\x92\xb3\xbb\xac\xb9\x24\x4d\x72\xb5\xde\x16\xcd\x6f\xbf\x18\x72\x57\xb6\x93\xdc\x8b\x40\x0f\xda\x25\x67\xce\xcc\x9c\x39\x1c\xee\x0a\xee\x6a\x02\xa9\x3c\x89\x68\x7d\x0f\xd1\x42\x88\xd6\x13\x48\x8c\x08\xa1\x15\x35\x60\x80\x58\x13\x58\x47\xa6\xc0\xff\x22\xfa\xb4\x57\x60\xa0\x29\x28\x57\x06\x68\x28\x22\x2f\x4d\x01\x8d\x9c\xac\xc0\xb5\x85\x56\x22\x59\xcd\x26\x43\x00\x2a\xb1\xd5\x11\x54\x80\x6f\xf3\xd9\x33\x28\x6b\x60\x77\xb3\xdf\x7e\x81\x9b\x3d\x85\x29\xbc\xba\xbe\x79\xbb\xb9\xde\xec\x76\x17\x9b\xbb\xcd\xfc\xc6\x91\x39\x3f\xda\x7d\x56\x46\xda\x2e\x4c\x27\x2b\xf8\x36\xbf\x56\x85\x47\xdf\xcf\x37\xce\x69\x25\x30\x2a\x6b\x60\xdf\x3a\x67\x7d\xfc\xce\xed\x3d\x0a\xb8\xd9\xa7\xdc\xe0\x55\x6d\x1b\x9a\xbf\x08\x3f\x59\xc1\x4e\xa3\xf9\xc7\x0c\xe0\xd2\x1c\x94\xb7\xa6\x21\x13\xe1\x80\x5e\x61\xa1\x29\x00\x7a\x02\x7a\x74\x68\x24\x49\x08\x96\xb9\xe8\xa1\xc1\x1e\x0a\x82\x36\x90\x9c\x01\x7c\xb8\xb9\xbb\x3c\x1b\xf3\x9b\xac\x80\x7e\x17\x28\xf6\x4e\x09\xd4\xba\x87\xd7\x9f\x36\xb7\xdb\xcd\xf9\xf5\xe5\xeb\x29\x14\x6d\x1c\x60\xdb\x10\x19\x17\x85\xa0\x10\x48\x42\xa7\x62\x3d\x59\xc1\xab\xd1\x18\x6a\xf2\x34\x03\xd8\xe8\x60\xa7\xf0\x8d\xf9\x3c\xe6\x16\xed\x4b\xfa\x9e\x71\xc6\x6d\xe0\x76\x48\xe5\xd7\x2f\xf8\x9f\x4c\x56\xb0\xa7\x14\x1d\x4c\xdb\x14\xe4\xc1\x96\xb0\xdd\xbd\xdb\x83\xb1\x92\x02\x83\xb6\x81\x66\xdc\xc4\x40\xd0\x29\xad\x39\xbf\xe0\x5a\x03\xad\x03\x65\x82\x92\x94\xbc\x83\x32\x95\x26\x10\x1e\x3b\x4d\x9e\x77\x22\x1a\x41\x1c\x39\x21\xad\x97\x8b\x9f\x07\xeb\xac\xbf\x27\x3f\x46\xe2\xbf\x84\x91\xbd\xd8\x7d\x30\x58\x2f\x4f\x26\x49\x4d\x2a\x70\xd9\x2f\x41\x9e\x27\xcb\x7f\x5a\x85\x48\x86\x19\x28\xad\x67\x41\x86\xb6\xc8\xba\x0c\x75\x46\xcd\x6b\x39\xb5\x53\x06\xfe\xc8\x9e\x14\xa2\xa1\xc8\xfb\xc3\xe3\x7a\x99\xf6\x8c\x3a\x90\x0f\xa8\x61\xa7\xdb\x2a\x49\x69\xa7\xb1\x87\x3f\x7d\xdc\x99\xdd\x9f\x01\xdb\x68\x1b\x8c\x43\x67\x99\xdd\x9c\xdf\x90\x05\x8b\x12\x6c\x11\x51\x19\x56\x07\xef\xd0\x63\x24\x6f\x50\xc3\x76\x07\x28\xa5\xa7\x10\xa0\xf4\xb6\x81\x90\x35\x4c\x12\x24\x1d\x94\xa0\x30\xcb\x15\x5b\x97\x24\x2e\x55\xc8\x62\x52\x31\x33\xdb\x3a\xe3\x72\x8e\x6f\x13\x6b\xca\x44\xf2\x07\xd4\x10\x1c\x09\x55\x2a\x0a\x50\xdb\x0e\xb4\x35\x15\xf3\xd2\xa1\x62\x81\x95\xe9\x84\x5b\x65\x2a\x40\xb8\xf8\xf7\xdd\x40\x39\x73\x85\xe0\xd1\x48\xdb\x80\x23\xf2\xdb\x0b\xce\xd7\x42\x20\xf4\xa2\x06\xdb\x46\x30\xd4\x0d\x5b\x89\xc6\xe4\x38\x06\x5d\x2f\x1b\xce\xe4\xdc\xda\x18\x22\xba\xb1\xb2\x41\xfb\x7c\x58\x18\xec\x3f\x56\x99\xdc\x3e\x8a\xdc\xdb\x19\xdc\x18\x08\x11\xfd\xa0\x0c\x2b\x07\xa1\x35\x78\x4f\x93\x15\x47\xad\x52\xaa\xc2\x1a\x43\x82\x79\x48\xad\x66\xe3\x22\x85\xf2\xe8\x52\x4e\x21\x75\x26\x49\xa0\xa6\x86\x6d\xa4\x0a\xc2\x1e\x58\x23\xb1\x26\xcf\x6d\x4f\x66\xdf\x25\x30\x59\x3d\x01\x71\xce\xeb\xb9\x72\x6f\xe6\x8f\xb3\xf4\x9b\x47\xe1\xe6\x6f\x16\x8b\xe5\xdc\x9d\xb8\xf9\xf2\xe4\xe2\xf4\xca\xda\xcf\xe7\x97\x7b\x71\x12\xf7\xe6\xf0\xe9\x96\x9a\xab\x10\x2e\xde\xab\xab\xeb\xaf\x74\x55\x7e\xbc\xad\xbb\x2f\xd8\x7d\xfd\x8c\xca\x3e\x84\xdd\xe9\x61\xd9\x4d\x86\x21\xf8\x24\x57\x4f\xc1\x59\x13\xb2\x64\x53\x4f\x98\xfa\xae\x26\xc3\x45\x73\xad\xdb\xdd\x87\x3d\x3c\xb4\xe4\xd5\x51\x02\x2a\x00\x42\xf4\x28\xc9\x96\x25\xa7\x4c\xb1\x23\xca\x95\xa0\x10\xad\x47\xd1\x33\x38\xbf\xb3\x67\x9f\xd8\x48\x67\xd3\x11\x49\xae\x52\x39\x13\x1e\x5a\xeb\xdb\x66\xfd\x86\xb3\xda\x38\x47\x46\x02\x82\xb0\x4d\x9a\x56\x03\xad\x6d\x20\x0f\x58\xf1\xca\x40\xd5\xb3\x99\xfe\x74\x5b\x30\x64\x8b\x83\xef\x7a\xf8\x67\xdc\x0b\x2a\xda\x0a\xb4\xad\x2a\xae\x45\xd3\x81\x34\xdb\x7e\x42\xad\x64\x7e\xcd\x92\xf8\x9f\x64\xc3\x29\x28\x53\xda\x29\x18\x1b\x95\xa0\x29\x74\xe8\x8d\x32\xd5\x14\xc8\x7b\xeb\xa7\x20\xbc\x4a\x67\xeb\xff\x93\x15\x63\x26\xff\x35\xbb\x8c\xc4\xfe\xe4\xfa\xd2\xb6\x82\x52\x69\x0a\xd9\xe7\x87\xc1\x37\xd7\xb6\x0a\xdf\xcf\x13\x59\xf0\x80\xa6\x19\x6c\x23\x08\x34\x40\x8a\x55\x93\x06\xde\x83\x56\x91\x4e\xa7\xd0\xf4\xe1\x41\x4f\x81\x87\x8a\x0d\xb1\x62\x79\xa7\xe1\x5a\x48\x85\x9a\x44\x5c\x27\x83\x31\xb1\xda\x86\x38\x82\xf3\xf3\x59\x1a\x05\xdc\x6b\x5e\x49\xa6\x30\xbc\x1c\xe1\x20\x90\x3f\x90\xcf\xa8\xec\xb4\x5e\x9e\xfc\x7d\xb6\x98\x2d\x66\xcb\xb3\xd3\xd3\xc5\xdf\x46\x6c\xee\x91\xc1\x86\x7e\x84\x7b\x82\x92\x45\x86\x61\xdb\xf5\xe8\x30\x02\x38\x0c\xa1\xb3\x5e\xfe\x0a\x00\xdb\xae\x47\x87\x74\xc6\xfb\xe3\x9d\xce\xae\xe3\xd8\x4f\xe7\x56\xda\xce\x68\x8b\x32\xe9\x4f\xa0\xa8\x09\x54\x83\x15\xe5\xe3\xe9\x31\x2a\x53\x05\xa0\x43\xd2\xae\x6d\xab\x3a\x5f\x7e\x2c\x08\x63\x59\x71\x92\x1e\x49\x02\x72\xef\x30\xd1\xa1\x04\x8d\xd2\x1c\xce\x6c\xd6\xb6\x05\x32\xa1\x1d\xbf\x56\xf0\x80\x4a\x63\xa1\xb4\x8a\xfd\x2c\xcf\xf3\x9a\xe9\xd1\xda\x76\x2a\xcf\xbf\x61\x7e\x42\xe4\xae\x97\xad\x49\xd3\x04\x93\x03\xd7\x99\x77\x19\x8c\xd3\x56\xa6\xca\xa3\xf5\x59\xb1\xa8\x75\xd6\xd5\xb1\xca\x74\x4b\xe7\x6b\xd1\x29\x63\x28\x97\xcd\x85\x54\xe8\x0b\xac\x08\x84\xd5\x2c\x0d\xfe\x54\xf8\xa3\xa4\xd2\xd5\xf0\x93\xb4\x64\xfa\x7e\xe0\xa0\x8c\x7f\x4c\x6a\x9f\x06\x7c\x9f\xe0\xaa\xdb\xdd\xdb\x3c\xfa\x4b\x14\x94\x12\x48\x4a\x7b\x71\x13\xaa\x12\x7a\xdb\x42\x87\xf9\x9c\x0f\x63\x32\xfb\x6e\x76\x5b\x26\xa0\xf2\x4e\x64\x87\xf5\x22\x49\x6e\x71\xf6\xd7\xc5\x22\x85\xdb\x18\xbe\xe6\x6a\x32\x71\xfc\xdc\x8a\xf6\x9e\xcc\x51\x3c\x23\x0c\x43\x3f\x33\x24\x10\x5a\x91\x89\x61\x84\xe7\xbd\xe4\xb9\xfe\xa7\xe5\xe7\x93\xbf\xa4\xb7\x7f\x71\x8c\x77\x8a\xbf\x20\xac\xe1\x9b\x32\x71\xc3\xca\x22\x1f\x55\x99\xa1\x98\x83\xc9\x0a\xbc\x13\xbc\x9a\x0e\x74\x31\x28\x6f\xee\x9d\x98\xf1\xea\xaf\xe0\xdc\x53\x9f\x61\xee\xa9\xff\x11\x85\x77\x7f\x0b\x00\x00\xff\xff\xca\xc5\x40\xad\x17\x0b\x00\x00")

func sampleObcrawlerConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleObcrawlerConf,
		"sample-obcrawler.conf",
	)
}

func sampleObcrawlerConf() (*asset, error) {
	bytes, err := sampleObcrawlerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-obcrawler.conf", size: 2839, mode: os.FileMode(420), modTime: time.Unix(1587501305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-obcrawler.conf": sampleObcrawlerConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-obcrawler.conf": &bintree{sampleObcrawlerConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
