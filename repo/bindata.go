// Code generated by go-bindata.
// sources:
// sample-obcrawler.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleObcrawlerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xdf\x73\xdb\xb8\x11\x7e\xd7\x5f\xb1\x0f\xb9\x99\x76\x46\x27\xc9\x3f\xae\x37\x67\x55\x9d\x91\xed\x5c\xaa\xd4\x8d\x35\x96\xf3\xa3\x79\x5b\x02\x4b\x12\x15\x08\xc0\x00\x28\x99\xe9\x34\x7f\x7b\x67\x01\x52\x96\x13\xf7\x26\xa3\x07\x91\x04\xf6\xdb\xdd\x6f\x3f\xec\x62\x0e\xf7\x35\x81\x54\x9e\x44\xb4\xbe\x83\x68\x21\x44\xeb\x09\x24\x46\x84\xd0\x8a\x1a\x30\x40\xac\x09\xac\x23\x53\xe0\x17\x44\x9f\xd6\x0a\x0c\x34\x06\xe5\xca\x00\x0d\x45\xe4\x4f\x63\x40\x23\x47\x73\x70\x6d\xa1\x95\x48\xbb\x26\xa3\xde\x01\x95\xd8\xea\x08\x2a\xc0\xd7\xe9\xe4\x08\xca\x1a\x58\xdf\x6e\x56\x9f\xe0\x76\x43\x61\x0c\xaf\x6e\x6e\xaf\x96\x37\xcb\xf5\xfa\x7a\x79\xbf\x9c\xde\x3a\x32\x97\x87\x7d\x1f\x95\x91\x76\x1f\xc6\xa3\x39\x7c\x9d\xde\xa8\xc2\xa3\xef\xa6\x4b\xe7\xb4\x12\x18\x95\x35\xb0\x69\x9d\xb3\x3e\x7e\x63\xf6\x4f\x14\x70\xbb\x49\xb1\xc1\xab\xda\x36\x34\x7d\xe6\x7e\x34\x87\xb5\x46\xf3\xdb\x04\xe0\xb5\xd9\x29\x6f\x4d\x43\x26\xc2\x0e\xbd\xc2\x42\x53\x00\xf4\x04\xf4\xe8\xd0\x48\x92\x10\x2c\x73\xd1\x41\x83\x1d\x14\x04\x6d\x20\x39\x01\x78\x77\x7b\xff\xfa\x62\x88\x6f\x34\x07\xfa\xbf\x40\xb1\x73\x4a\xa0\xd6\x1d\xfc\xf4\x61\x79\xb7\x5a\x5e\xde\xbc\xfe\x69\x0c\x45\x1b\x7b\xd8\x36\x44\xc6\x45\x21\x28\x04\x92\xb0\x57\xb1\x1e\xcd\xe1\xd5\xb0\x19\x6a\xf2\x34\x01\x58\xea\x60\xc7\xf0\x95\xf9\x3c\xc4\x16\xed\x73\xfa\x8e\x38\xe3\x32\x70\x39\xa4\xf2\x8b\x67\xfc\x8f\x46\x73\xd8\x50\xf2\x0e\xa6\x6d\x0a\xf2\x60\x4b\x58\xad\x7f\xdf\x80\xb1\x92\x02\x83\xb6\x81\x26\x5c\xc4\x40\xb0\x57\x5a\x73\x7c\xc1\xb5\x06\x5a\x07\xca\x04\x25\x29\x59\x07\x65\x2a\x4d\x20\x3c\xee\x35\x79\x5e\x89\x68\x04\xb1\xe7\x84\xb4\x38\x99\xbd\xec\x6c\x6f\xfd\x96\xfc\xe0\x89\xff\x12\x46\xb6\x62\xf3\x7e\xc3\xe2\xe4\x74\x94\xd4\xa4\x02\xa7\xfd\x1c\xe4\x38\x58\xfe\xd3\x2a\x44\x32\xcc\x40\x69\x3d\x0b\x32\xb4\x45\xd6\x65\xa8\x33\x6a\xfe\x96\x43\x3b\x63\xe0\xf7\x6c\x49\x21\x1a\x8a\xbc\xde\x3f\x2e\x4e\xd2\x9a\x51\x3b\xf2\x01\x35\xac\x75\x5b\x25\x29\xad\x35\x76\xf0\xa7\xf7\x6b\xb3\xfe\x33\x60\x1b\x6d\x83\xb1\xaf\x2c\xb3\x9b\xe3\xeb\xa3\x60\x51\x82\x2d\x22\x2a\xc3\xea\xe0\x15\x7a\x8c\xe4\x0d\x6a\x58\xad\x01\xa5\xf4\x14\x02\x94\xde\x36\x10\xb2\x86\x49\x82\xa4\x9d\x12\x14\x26\x39\x63\xeb\x92\xc4\xa5\x0a\x59\x4c\x2a\x66\x66\x5b\x67\x5c\x8e\xf1\x2a\xb1\xa6\x4c\x24\xbf\x43\x0d\xc1\x91\x50\xa5\xa2\x00\xb5\xdd\x83\xb6\xa6\x62\x5e\xf6\xa8\x58\x60\x65\x3a\xe1\x56\x99\x0a\x10\xae\xff\x7e\xdf\x53\xce\x5c\x21\x78\x34\xd2\x36\xe0\x88\xfc\xea\x9a\xe3\xb5\x10\x08\xbd\xa8\xc1\xb6\x11\x0c\xed\xfb\xa5\x44\x63\x32\x1c\x9c\x2e\x7e\x69\x38\x92\x4b\x6b\x63\x88\xe8\x86\xcc\x7a\xed\xf3\x61\x61\xb0\x7f\x5b\x65\x72\xf9\x28\x72\x6d\x27\x70\x6b\x20\x44\xf4\xbd\x32\xac\xec\x85\xd6\xe0\x96\x46\x73\xf6\x5a\xa5\x50\x85\x35\x86\x04\xf3\x90\x4a\xcd\x9b\x8b\xe4\xca\xa3\x4b\x31\x85\x54\x99\x24\x81\x9a\x1a\xde\x23\x55\x10\x76\xc7\x1a\x89\x35\x79\x2e\x7b\xda\xf6\x4d\x00\xa3\xf9\x13\x10\xc7\xbc\x98\x2a\x77\x3e\x7d\x9c\xa4\xdf\x34\x0a\x37\x3d\x9f\xcd\x4e\xa6\xee\xd4\x4d\x4f\x4e\xaf\xcf\xfe\x61\xed\xc7\xf5\xe7\xb3\xc7\xcb\x77\x77\x6f\x1e\xcf\xcb\xfa\xae\x28\xff\xb5\x14\x9f\xde\xd7\xe2\x73\x7d\xff\xf9\xf4\xe6\x6a\xfb\xf6\xd7\xf3\xed\xdb\x4f\x6f\xca\x2f\xbf\xdd\x7f\xb8\xb9\x1f\xf5\x4d\xf0\x49\xae\x9e\x82\xb3\x26\x64\xc9\xa6\x9a\x30\xf5\xfb\x9a\x0c\x27\xcd\xb9\xae\xd6\xef\x36\xf0\xd0\x92\x57\x07\x09\xa8\x00\x08\xd1\xa3\x24\x5b\x96\x1c\x32\xc5\x3d\x51\xce\x04\x85\x68\x3d\x8a\x8e\xc1\xf9\x9d\x2d\xbb\xc4\x46\x3a\x9b\x8e\x48\x72\x96\xca\x99\xf0\xd0\x5a\xdf\x36\x8b\x73\x8e\x6a\xe9\x1c\x19\x09\x08\xc2\x36\xa9\x5b\xf5\xb4\xb6\x81\x3c\x60\xc5\x5f\x7a\xaa\x8e\x7a\xfa\xd3\xb4\x60\xc8\x16\x7b\xdb\x45\xff\xcf\xb8\xd7\x54\xb4\x15\x68\x5b\x55\x9c\x8b\xa6\x1d\x69\xde\xfb\x01\xb5\x92\xf9\x35\x4b\xe2\x3f\x92\x37\x8e\x41\x99\xd2\x8e\xc1\xd8\xa8\x04\x8d\x61\x8f\xde\x28\x53\x8d\x81\xbc\xb7\x7e\x0c\xc2\xab\x74\xb6\xfe\x3b\x9a\x33\x66\xb2\x5f\xb0\xc9\x40\xec\x0b\xe3\x4b\xdb\x0a\x4a\xa5\x29\x64\x9b\xef\x1a\xdf\x54\xdb\x2a\x7c\xdb\x4f\x64\xc1\x0d\x9a\x26\xb0\x8a\x20\xd0\x00\x29\x56\x4d\x6a\x78\x0f\x5a\x45\x3a\x1b\x43\xd3\x85\x07\x3d\x06\x6e\x2a\x36\xc4\x8a\xe5\x9d\x9a\x6b\x21\x15\x6a\x12\x71\x91\x36\x0c\x81\xd5\x36\xc4\x01\x9c\x9f\x2f\x52\x2b\xe0\x5a\xf3\x97\xb4\x15\xfa\x97\x03\x1c\x04\xf2\x3b\xf2\x19\x95\x8d\x16\x27\xa7\xbf\x4e\x66\x93\xd9\xe4\xe4\xe2\xec\x6c\xf6\x97\x01\x9b\x6b\x64\xb0\xa1\xef\xe1\x9e\xa0\x64\x91\x61\x78\xef\x62\x30\x18\x00\x1c\x86\xb0\xb7\x5e\xfe\x08\x00\xef\x5d\x0c\x06\xe9\x8c\x77\x87\x99\xce\xa6\x43\xdb\x4f\xe7\x56\xda\xbd\xd1\x16\x65\xd2\x9f\x40\x51\x13\xa8\x06\x2b\xca\xc7\xd3\x63\x54\xa6\x0a\x40\xbb\xa4\x5d\xdb\x56\x75\x1e\x7e\x2c\x08\x63\x59\x71\x92\x1e\x49\x02\x72\xed\x30\xd1\xa1\x04\x0d\xd2\xec\xcf\x6c\xd6\xb6\x05\x32\xa1\x1d\x6e\x2b\xb8\x43\xa5\xb1\x50\x5a\xc5\x6e\x92\xfb\x79\xcd\xf4\x68\x6d\xf7\x2a\xf7\xbf\xbe\x7f\x42\xe4\xaa\x97\xad\x49\xdd\x04\x93\x01\xe7\x99\x57\x19\x8c\xc3\x56\xa6\xca\xad\xf5\x28\x59\xd4\x3a\xeb\xea\x90\x65\x9a\xd2\x79\x2c\x3a\x65\x0c\xe5\xb4\x39\x91\x0a\x7d\x81\x15\x81\xb0\x9a\xa5\xc1\x57\x85\x3f\x0a\x2a\x8d\x86\x17\xc2\x92\xe9\xfe\xc0\x4e\x19\xff\x10\xd4\x26\x35\xf8\x2e\xc1\x55\x77\xeb\xab\xdc\xfa\x4b\x14\x94\x02\x48\x4a\x7b\x36\x09\x55\x09\x9d\x6d\x61\x8f\xf9\x9c\xf7\x6d\x32\xdb\x2e\xd7\x2b\x26\xa0\xf2\x4e\x64\x83\xc5\x2c\x49\x6e\x76\xf1\xcb\x6c\x96\xdc\x2d\x0d\x8f\xb9\x9a\x4c\x1c\xae\x5b\xd1\x6e\xc9\x1c\xc4\x33\xc0\x30\xf4\xd1\x46\x02\xa1\x15\x99\x18\x06\x78\x5e\x4b\x96\x8b\xbf\x5a\x7e\x3e\xfd\x39\xbd\xfd\x8d\x7d\xfc\xae\xf8\x06\x61\x0d\x4f\xca\xc4\x0d\x2b\x8b\x7c\x54\x65\x86\x62\x0e\x46\x73\xf0\x4e\xf0\xd7\x74\xa0\x8b\x5e\x79\x53\xef\xc4\x84\xbf\xfe\x08\xce\x96\xba\x0c\xb3\xa5\xee\x7b\x14\x5e\x1d\x1a\x43\x3f\x76\x43\x6d\x5b\x2d\x87\x1b\x5f\xea\x32\x47\xec\xbf\x34\xcc\x55\x09\x6d\x18\x7c\xf3\xfd\xe0\xe7\x8a\x0c\x79\xe4\xc9\xbe\xd9\xdc\x1c\x87\xc3\xcc\xac\xca\x5c\xfb\xde\x9f\x0a\x49\x40\xc9\x59\x9a\x0a\x43\x06\xbc\xf2\x04\xa4\x62\x96\x9e\x56\x5b\xd2\xe9\x42\x1a\x3d\xa5\x15\xe4\x19\xb7\xe3\x76\xcb\xe8\x43\x80\xca\x85\xa7\x66\x32\xfa\x5f\x00\x00\x00\xff\xff\x36\xb9\x7b\x7b\xfb\x0b\x00\x00")

func sampleObcrawlerConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleObcrawlerConf,
		"sample-obcrawler.conf",
	)
}

func sampleObcrawlerConf() (*asset, error) {
	bytes, err := sampleObcrawlerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-obcrawler.conf", size: 3067, mode: os.FileMode(420), modTime: time.Unix(1587510436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-obcrawler.conf": sampleObcrawlerConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-obcrawler.conf": &bintree{sampleObcrawlerConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
