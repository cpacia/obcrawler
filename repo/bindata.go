// Code generated by go-bindata.
// sources:
// sample-obcrawler.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleObcrawlerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xdf\x6f\xdb\x38\x12\x7e\xf7\x5f\x31\x0f\x2d\x70\x07\xf8\xfc\x23\xc9\x5d\xd1\xf8\x7c\x80\x93\xb4\x3d\xf7\x72\x8d\x11\xa7\x3f\xb6\x6f\x23\x72\x24\x71\x43\x91\x0c\x49\xd9\x51\x17\xdb\xbf\x7d\x31\xa4\xe4\x24\x6d\x77\x51\xf8\xc1\x12\x39\xf3\xcd\xcc\x37\x1f\x87\x5a\xc0\x4d\x4d\x20\x95\x27\x11\xad\xef\x20\x5a\x08\xd1\x7a\x02\x89\x11\x21\xb4\xa2\x06\x0c\x10\x6b\x02\xeb\xc8\x14\xf8\x05\xd1\xa7\xbd\x02\x03\x8d\x41\xb9\x32\x40\x43\x11\x79\x69\x0c\x68\xe4\x68\x01\xae\x2d\xb4\x12\xc9\x6a\x32\xea\x03\x50\x89\xad\x8e\xa0\x02\x7c\x9d\x4e\x1e\x41\x59\x03\x9b\xab\xed\xfa\x13\x5c\x6d\x29\x8c\xe1\xd9\xe5\xd5\xf9\xea\x72\xb5\xd9\x5c\xac\x6e\x56\xd3\x2b\x47\xe6\xec\x60\xf7\x51\x19\x69\xf7\x61\x3c\x5a\xc0\xd7\xe9\xa5\x2a\x3c\xfa\x6e\xba\x72\x4e\x2b\x81\x51\x59\x03\xdb\xd6\x39\xeb\xe3\x37\x6e\xff\x47\x01\x57\xdb\x94\x1b\x3c\xab\x6d\x43\xd3\x27\xe1\x47\x0b\xd8\x68\x34\x2f\x27\x00\xaf\xcc\x4e\x79\x6b\x1a\x32\x11\x76\xe8\x15\x16\x9a\x02\xa0\x27\xa0\x7b\x87\x46\x92\x84\x60\x99\x8b\x0e\x1a\xec\xa0\x20\x68\x03\xc9\x09\xc0\xbb\xab\x9b\x57\xa7\x43\x7e\xa3\x05\xd0\x9f\x02\xc5\xce\x29\x81\x5a\x77\xf0\xfc\xc3\xea\x7a\xbd\x3a\xbb\x7c\xf5\x7c\x0c\x45\x1b\x7b\xd8\x36\x44\xc6\x45\x21\x28\x04\x92\xb0\x57\xb1\x1e\x2d\xe0\xd9\x60\x0c\x35\x79\x9a\x00\xac\x74\xb0\x63\xf8\xca\x7c\x1e\x72\x8b\xf6\x29\x7d\x8f\x38\xe3\x36\x70\x3b\xa4\xf2\xcb\x27\xfc\x8f\x46\x0b\xd8\x52\x8a\x0e\xa6\x6d\x0a\xf2\x60\x4b\x58\x6f\x5e\x6f\xc1\x58\x49\x81\x41\xdb\x40\x13\x6e\x62\x20\xd8\x2b\xad\x39\xbf\xe0\x5a\x03\xad\x03\x65\x82\x92\x94\xbc\x83\x32\x95\x26\x10\x1e\xf7\x9a\x3c\xef\x44\x34\x82\x38\x72\x42\x5a\xce\x67\x3f\x0e\xb6\xb7\xfe\x96\xfc\x10\x89\xff\x12\x46\xf6\x62\xf7\xde\x60\x39\x3f\x1a\x25\x35\xa9\xc0\x65\x3f\x05\x79\x9c\x2c\xff\x69\x15\x22\x19\x66\xa0\xb4\x9e\x05\x19\xda\x22\xeb\x32\xd4\x19\x35\xaf\xe5\xd4\x8e\x19\xf8\x3d\x7b\x52\x88\x86\x22\xef\xf7\x8f\xcb\x79\xda\x33\x6a\x47\x3e\xa0\x86\x8d\x6e\xab\x24\xa5\x8d\xc6\x0e\xfe\xf6\x7e\x63\x36\x7f\x07\x6c\xa3\x6d\x30\xf6\x9d\x65\x76\x73\x7e\x7d\x16\x2c\x4a\xb0\x45\x44\x65\x58\x1d\xbc\x43\xf7\x91\xbc\x41\x0d\xeb\x0d\xa0\x94\x9e\x42\x80\xd2\xdb\x06\x42\xd6\x30\x49\x90\xb4\x53\x82\xc2\x24\x57\x6c\x5d\x92\xb8\x54\x21\x8b\x49\xc5\xcc\x6c\xeb\x8c\xcb\x39\x9e\x27\xd6\x94\x89\xe4\x77\xa8\x21\x38\x12\xaa\x54\x14\xa0\xb6\x7b\xd0\xd6\x54\xcc\xcb\x1e\x15\x0b\xac\x4c\x27\xdc\x2a\x53\x01\xc2\xc5\x7f\x6f\x7a\xca\x99\x2b\x04\x8f\x46\xda\x06\x1c\x91\x5f\x5f\x70\xbe\x16\x02\xa1\x17\x35\xd8\x36\x82\xa1\x7d\xbf\x95\x68\x4c\x8e\x43\xd0\xe5\xbc\xe1\x4c\xce\xac\x8d\x21\xa2\x1b\x2a\xeb\xb5\xcf\x87\x85\xc1\x7e\xb5\xca\xe4\xf6\x51\xe4\xde\x4e\xe0\xca\x40\x88\xe8\x7b\x65\x58\xd9\x0b\xad\xc1\x5b\x1a\x2d\x38\x6a\x95\x52\x15\xd6\x18\x12\xcc\x43\x6a\x35\x1b\x17\x29\x94\x47\x97\x72\x0a\xa9\x33\x49\x02\x35\x35\x6c\x23\x55\x10\x76\xc7\x1a\x89\x35\x79\x6e\x7b\x32\xfb\x26\x81\xd1\xe2\x01\x88\x73\x5e\x4e\x95\x3b\x99\xde\x4f\xd2\x6f\x1a\x85\x9b\x9e\xcc\x66\xf3\xa9\x3b\x72\xd3\xf9\xd1\xc5\xf1\xff\xac\xfd\xb8\xf9\x7c\x7c\x7f\xf6\xee\xfa\xcd\xfd\x49\x59\x5f\x17\xe5\x2f\x2b\xf1\xe9\x7d\x2d\x3e\xd7\x37\x9f\x8f\x2e\xcf\x6f\xdf\xbe\x38\xb9\x7d\xfb\xe9\x4d\xf9\xe5\xe5\xcd\x87\xcb\x9b\x51\x3f\x04\x1f\xe4\xea\x29\x38\x6b\x42\x96\x6c\xea\x09\x53\xbf\xaf\xc9\x70\xd1\x5c\xeb\x7a\xf3\x6e\x0b\x77\x2d\x79\x75\x90\x80\x0a\x80\x10\x3d\x4a\xb2\x65\xc9\x29\x53\xdc\x13\xe5\x4a\x50\x88\xd6\xa3\xe8\x18\x9c\xdf\xd9\xb3\x4b\x6c\xa4\xb3\xe9\x88\x24\x57\xa9\x9c\x09\x77\xad\xf5\x6d\xb3\x3c\xe1\xac\x56\xce\x91\x91\x80\x20\x6c\x93\xa6\x55\x4f\x6b\x1b\xc8\x03\x56\xbc\xd2\x53\xf5\x68\xa6\x3f\xdc\x16\x0c\xd9\x62\xef\xbb\xec\xff\x19\xf7\x82\x8a\xb6\x02\x6d\xab\x8a\x6b\xd1\xb4\x23\xcd\xb6\x1f\x50\x2b\x99\x5f\xb3\x24\x7e\x93\x6c\x38\x06\x65\x4a\x3b\x06\x63\xa3\x12\x34\x86\x3d\x7a\xa3\x4c\x35\x06\xf2\xde\xfa\x31\x08\xaf\xd2\xd9\xfa\x7d\xb4\x60\xcc\xe4\xbf\x64\x97\x81\xd8\x1f\x5c\x5f\xda\x56\x50\x2a\x4d\x21\xfb\x7c\x37\xf8\xa6\xda\x56\xe1\xdb\x79\x22\x0b\x1e\xd0\x34\x81\x75\x04\x81\x06\x48\xb1\x6a\xd2\xc0\xbb\xd3\x2a\xd2\xf1\x18\x9a\x2e\xdc\xe9\x31\xf0\x50\xb1\x21\x56\x2c\xef\x34\x5c\x0b\xa9\x50\x93\x88\xcb\x64\x30\x24\x56\xdb\x10\x07\x70\x7e\x3e\x4d\xa3\x80\x7b\xcd\x2b\xc9\x14\xfa\x97\x03\x1c\x04\xf2\x3b\xf2\x19\x95\x9d\x96\xf3\xa3\x17\x93\xd9\x64\x36\x99\x9f\x1e\x1f\xcf\xfe\x35\x60\x73\x8f\x0c\x36\xf4\x3d\xdc\x03\x94\x2c\x32\x0c\xdb\x2e\x07\x87\x01\xc0\x61\x08\x7b\xeb\xe5\xcf\x00\xb0\xed\x72\x70\x48\x67\xbc\x3b\xdc\xe9\xec\x3a\x8c\xfd\x74\x6e\xa5\xdd\x1b\x6d\x51\x26\xfd\x09\x14\x35\x81\x6a\xb0\xa2\x7c\x3c\x3d\x46\x65\xaa\x00\xb4\x4b\xda\xb5\x6d\x55\xe7\xcb\x8f\x05\x61\x2c\x2b\x4e\xd2\x3d\x49\x40\xee\x1d\x26\x3a\x94\xa0\x41\x9a\xfd\x99\xcd\xda\xb6\x40\x26\xb4\xc3\xd7\x0a\xee\x50\x69\x2c\x94\x56\xb1\x9b\xe4\x79\x5e\x33\x3d\x5a\xdb\xbd\xca\xf3\xaf\x9f\x9f\x10\xb9\xeb\x65\x6b\xd2\x34\xc1\xe4\xc0\x75\xe6\x5d\x06\xe3\xb4\x95\xa9\xf2\x68\x7d\x54\x2c\x6a\x9d\x75\x75\xa8\x32\xdd\xd2\xf9\x5a\x74\xca\x18\xca\x65\x73\x21\x15\xfa\x02\x2b\x02\x61\x35\x4b\x83\x3f\x15\xfe\x2a\xa9\x74\x35\xfc\x20\x2d\x99\xbe\x1f\x38\x28\xe3\x1f\x92\xda\xa6\x01\xdf\x25\xb8\xea\x7a\x73\x9e\x47\x7f\x89\x82\x52\x02\x49\x69\x4f\x6e\x42\x55\x42\x67\x5b\xd8\x63\x3e\xe7\xfd\x98\xcc\xbe\xab\xcd\x9a\x09\xa8\xbc\x13\xd9\x61\x39\x4b\x92\x9b\x9d\xfe\x73\x36\x4b\xe1\x56\x86\xaf\xb9\x9a\x4c\x1c\x3e\xb7\xa2\xbd\x25\x73\x10\xcf\x00\xc3\xd0\x8f\x0c\x09\x84\x56\x64\x62\x18\xe0\x79\x2f\x79\x2e\xff\x6d\xf9\xf9\xe8\x1f\xe9\xed\x3f\x1c\xe3\xb5\xe2\x2f\x08\x6b\xf8\xa6\x4c\xdc\xb0\xb2\xc8\x47\x55\x66\x28\xe6\x60\xb4\x00\xef\x04\xaf\xa6\x03\x5d\xf4\xca\x9b\x7a\x27\x26\xbc\xfa\x33\x38\xb7\xd4\x65\x98\x5b\xea\xbe\x47\xe1\xdd\x3f\x02\x00\x00\xff\xff\xde\xf3\x0e\x10\x17\x0b\x00\x00")

func sampleObcrawlerConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleObcrawlerConf,
		"sample-obcrawler.conf",
	)
}

func sampleObcrawlerConf() (*asset, error) {
	bytes, err := sampleObcrawlerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-obcrawler.conf", size: 2839, mode: os.FileMode(420), modTime: time.Unix(1587506482, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-obcrawler.conf": sampleObcrawlerConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-obcrawler.conf": &bintree{sampleObcrawlerConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
