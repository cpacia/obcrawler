// Code generated by go-bindata.
// sources:
// sample-obcrawler.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleObcrawlerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x5d\x73\xdb\xba\x11\x7d\xd7\xaf\xd8\x87\x64\xa6\x9d\x51\x24\xf9\x23\xcd\xc4\xaa\x3a\xa3\xd8\x49\xaa\xd4\x8d\x35\x96\xf3\xd1\xbc\x2d\x81\x25\x89\x0a\x04\x60\x00\x94\xcc\x76\x6e\x7e\xfb\x9d\x05\x48\x5b\x4e\x7c\xef\x64\xf4\x20\x92\xd8\x3d\xd8\x3d\x7b\xb0\x8b\x39\xdc\xd4\x04\x52\x79\x12\xd1\xfa\x0e\xa2\x85\x10\xad\x27\x90\x18\x11\x42\x2b\x6a\xc0\x00\xb1\x26\xb0\x85\xf0\xb8\xd7\xe4\xd3\x52\x81\x81\xc6\xa0\x5c\x19\xa0\xa1\x88\xfc\x69\x0c\x68\xe4\x68\x0e\xae\x2d\xb4\x12\xc9\x6a\x32\xea\xf1\xa9\xc4\x56\x47\x50\x01\xbe\x4f\x27\x0f\x48\xd6\xc0\xfa\x6a\xb3\xfa\x0a\x57\x1b\x0a\x63\x78\x76\x79\x75\xbe\xbc\x5c\xae\xd7\x17\xcb\x9b\xe5\xf4\xea\xd0\xec\x8b\x32\xd2\xee\xc3\x78\x34\x87\xef\xd3\x4b\x55\x78\xf4\xdd\x74\xe9\x9c\x56\x02\xa3\xb2\x06\x36\xad\x73\xd6\xc7\xc7\x5e\xff\x46\x01\x57\x9b\x14\x18\x3c\xab\x6d\x43\x8f\x96\x47\x73\x58\x6b\x34\xaf\x27\x00\x6f\xcd\x4e\x79\x6b\x1a\x32\x11\x76\xe8\x15\x16\x9a\x02\xa0\x27\xa0\x3b\x87\x46\x92\x84\x60\x99\x86\x0e\x1a\xec\xa0\x20\x68\x03\xc9\x09\xc0\xc7\xab\x9b\xb7\x67\x43\x74\xa3\x39\xd0\x1f\x02\xc5\xce\x29\x81\x5a\x77\xf0\xfc\xf3\xf2\x7a\xb5\x7c\x73\xf9\xf6\xf9\x18\x8a\x36\xf6\xb0\x6d\x88\x8c\x8b\x42\x50\x08\x24\x61\xaf\x62\x3d\x9a\xc3\xb3\xc1\x18\x6a\xf2\x34\x01\x58\xea\x60\xc7\xf0\x9d\xb9\xbc\x8f\x2d\xda\xc7\xdc\x1d\x30\xc6\x25\xe0\x52\x48\xe5\x17\x87\xdc\x8f\x46\x73\xd8\x50\xda\x1c\x4c\xdb\x14\xcc\x48\x09\xab\xf5\xbb\x0d\x18\x2b\x29\x30\x66\x1b\x68\xc2\xf5\x0b\x04\x7b\xa5\x35\x87\x17\x5c\x6b\xa0\x75\xa0\x4c\x50\x92\x92\x77\x50\xa6\xd2\x04\x03\xaf\xca\x84\x88\x46\x10\x6f\x9c\x90\x16\x47\xb3\xa7\x37\xdb\x5b\xbf\x25\x3f\xec\xc4\x7f\x09\x23\x7b\xb1\x7b\x6f\xb0\x38\x3a\x1e\x25\x21\xa9\xc0\x59\x3f\x06\x39\x0c\x96\xff\xb4\x0a\x91\x0c\x13\x50\x5a\xcf\x5a\x0c\x6d\x91\x25\x19\xea\x8c\x9a\xbf\xe5\xd0\x4e\x18\xf8\x13\x7b\x52\x88\x86\x22\xaf\xf7\x8f\x8b\xa3\xb4\x66\xd4\x8e\x7c\x40\x0d\x6b\xdd\x56\x49\x48\x6b\x8d\x1d\xfc\xe5\xd3\xda\xac\xff\x0a\xd8\x46\xdb\x60\xec\x0b\x6b\x1d\x99\x1c\x5f\x1f\x05\x2b\x12\x6c\x11\x51\x19\x16\x07\xaf\xd0\x5d\x24\x6f\x50\xc3\x6a\x0d\x28\xa5\xa7\x10\xa0\xf4\xb6\x81\x90\x05\x4c\x12\x24\xed\x94\xa0\x30\xc9\x19\x5b\x97\xf4\x2d\x55\xc8\x5a\x52\x31\x33\xdb\x3a\xe3\x72\x8c\xe7\x89\x35\x65\x22\xf9\x1d\x6a\x08\x8e\x84\x2a\x15\x05\xa8\xed\x1e\xb4\x35\x15\xf3\xb2\x47\xc5\xfa\x2a\xd3\xd9\xb6\xca\x54\x80\x70\xf1\xcf\x9b\x9e\x72\xe6\x0a\xc1\xa3\x91\xb6\x01\x47\xe4\x57\x17\x1c\xaf\x85\x40\xe8\x45\x0d\xb6\x8d\x60\x68\xdf\x2f\x25\x1a\x93\xe3\xb0\xe9\xe2\x65\xc3\x91\xbc\xb1\x36\x86\x88\x6e\xc8\xac\x97\x3e\x9f\x15\x06\xfb\xaf\x55\x26\x97\x8f\x22\xd7\x76\x02\x57\x06\x42\x44\xdf\x2b\xc3\xca\x5e\x68\x0d\x6e\x69\x34\xe7\x5d\xab\x14\xaa\xb0\xc6\x90\x60\x1e\x52\xa9\xd9\xb8\x48\x5b\x79\x74\x29\xa6\x90\x2a\x93\x24\x50\x53\xc3\x36\x52\x05\x61\x77\xac\x91\x58\x93\xe7\xb2\x27\xb3\x1f\x02\x18\xcd\x1f\x80\x38\xe6\xc5\x54\xb9\xd3\xe9\xdd\x24\xfd\xa6\x51\xb8\xe9\xe9\x6c\x76\x34\x75\xc7\x6e\x7a\x74\x7c\x71\xf2\x2f\x6b\xbf\xac\xbf\x9d\xdc\xbd\xf9\x78\xfd\xfe\xee\xb4\xac\xaf\x8b\xf2\x3f\x4b\xf1\xf5\x53\x2d\xbe\xd5\x37\xdf\x8e\x2f\xcf\xb7\x1f\x5e\x9d\x6e\x3f\x7c\x7d\x5f\xfe\xef\xf5\xcd\xe7\xcb\x9b\x51\xdf\xff\x1e\xe4\xea\x29\x38\x6b\x42\x96\x6c\xaa\x09\x53\xbf\xaf\xc9\x70\xd2\x9c\xeb\x6a\xfd\x71\x03\xb7\x2d\x79\x75\x2f\x01\x15\x00\x21\x7a\x94\x64\xcb\x92\x43\xa6\xb8\x27\xca\x99\xa0\x10\xad\x47\xd1\x31\x38\xbf\xb3\x67\x97\xd8\x48\x67\xd3\x11\x49\xce\x52\x39\x13\x6e\x5b\xeb\xdb\x66\x71\xca\x51\x2d\x9d\x23\x23\x01\x41\xd8\x26\x35\xab\x9e\xd6\x36\x90\x07\xac\xf8\x4b\x4f\xd5\x41\x3b\x7f\x98\x13\x0c\xd9\x62\xef\xbb\xe8\xff\x19\xf7\x82\x8a\xb6\x02\x6d\xab\x8a\x73\xd1\xb4\x23\xcd\xb6\x9f\x51\x2b\x99\x5f\xb3\x24\xfe\x2f\xd9\x70\x0c\xca\x94\x76\x0c\xc6\x46\x25\x68\x0c\x7b\xf4\x46\x99\x6a\x0c\xe4\xbd\xf5\x63\x10\x5e\xa5\xb3\xf5\xdb\x68\xce\x98\xc9\x7f\xc1\x2e\x03\xb1\x4f\x0c\x2e\x6d\x2b\x28\x95\xa6\x90\x7d\x7e\xec\x7b\x53\x6d\xab\xf0\x63\x3b\x91\x05\xb7\x67\x9a\xc0\x2a\x82\x40\x03\xa4\x58\x34\xa9\xdf\xdd\x6a\x15\xe9\x64\x0c\x4d\x17\x6e\xf5\x18\xb8\xa7\xd8\x10\x2b\x56\x77\x6a\xad\x85\x54\xa8\x49\xc4\x45\x32\x18\xe2\xaa\x6d\x88\x03\x38\x3f\x9f\xa5\x4e\xc0\xa5\xe6\x2f\xc9\x14\xfa\x97\x7b\x38\x08\xe4\x77\xe4\x33\x2a\x3b\x2d\x8e\x8e\x5f\x4d\x66\x93\xd9\xe4\xe8\xec\xe4\x64\xf6\xb7\x01\x9b\x4b\x64\xb0\xa1\x9f\xe1\x1e\xa0\x64\x91\x61\xd8\x76\x31\x38\x0c\x00\x0e\x43\xd8\x5b\x2f\x7f\x05\x80\x6d\x17\x83\x43\x3a\xe2\xdd\xfd\x34\x67\xd7\xa1\xeb\xa7\x63\x2b\xed\xde\x68\x8b\x32\xc9\x4f\xa0\xa8\x09\x54\x83\x15\xe5\xd3\xe9\x31\x2a\x53\x05\xa0\x5d\x92\xae\x6d\xab\x3a\x8f\x3e\xd6\x83\xb1\x2c\x38\x49\x77\x24\x01\xb9\x74\x98\xe8\x50\x82\x06\x65\xf6\x47\x36\x4b\xdb\x02\x99\xd0\x0e\xd7\x14\xdc\xa1\xd2\x58\x28\xad\x62\x37\xc9\xed\xbc\x66\x7a\xb4\xb6\x7b\x95\xdb\x5f\xdf\x3e\x21\x72\xd5\xcb\xd6\xa4\x66\x82\xc9\x81\xf3\xcc\xab\x0c\xc6\x61\x2b\x53\xe5\xce\x7a\x90\x2c\x6a\x9d\x65\x75\x9f\x65\x9a\xd1\x79\x2a\x3a\x65\x0c\xe5\xb4\x39\x91\x0a\x7d\x81\x15\x81\xb0\x9a\xa5\xc1\x17\x85\x3f\x0b\x2a\x4d\x86\x27\xc2\x92\xe9\xf6\xc0\x9b\x32\xfe\x7d\x50\x9b\xd4\xdf\xbb\x04\x57\x5d\xaf\xcf\x73\xe7\x2f\x51\x50\x0a\x20\x29\xed\xd1\x20\x54\x25\x74\xb6\x85\x3d\xe6\x63\xde\x77\xc9\xec\xbb\x5c\xaf\x98\x80\xca\x3b\x91\x1d\x16\xb3\x24\xb9\xd9\xd9\xcb\xd9\x2c\x6d\xb7\x34\x3c\xe5\x6a\x32\x71\xb8\x6a\x45\xbb\x25\x73\x2f\x9e\x01\x86\xa1\x0f\x0c\x09\x84\x56\x64\x62\x18\xe0\x79\x2d\x79\x2e\xfe\x6e\xf9\xf9\xf8\x45\x7a\xfb\x07\xef\xf1\x4e\xf1\x05\xc2\x1a\x1e\x94\x89\x1b\x56\x16\xf9\xa8\xca\x0c\xc5\x1c\x8c\xe6\xe0\x9d\xe0\xaf\x8f\xcf\xb3\x77\x62\xc2\x5f\x7f\x05\x67\x4b\x5d\x86\xd9\x52\xf7\x33\x0a\xaf\x0e\x8d\xa1\x9f\xba\xa1\xb6\xad\x96\xc3\x7d\x2f\x35\x99\x03\xf6\x9f\x9a\xe5\xaa\x84\x36\x0c\x7b\xf3\xf5\xe0\x45\x45\x86\x3c\xf2\x60\xdf\x6c\x2e\x0f\xc3\x61\x66\x56\x65\xae\x7d\xbf\x9f\x0a\x49\x40\x69\xb3\x34\x14\x86\x0c\x78\xe5\x01\x48\xc5\x2c\x3d\xad\xb6\xa4\xd3\x75\x34\x7a\x4a\x2b\xc8\x23\x6e\xc7\xdd\x96\xd1\x87\x00\x95\x0b\x0f\xcd\x64\xf4\x7b\x00\x00\x00\xff\xff\x56\xb5\x6e\xbb\xf4\x0b\x00\x00")

func sampleObcrawlerConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleObcrawlerConf,
		"sample-obcrawler.conf",
	)
}

func sampleObcrawlerConf() (*asset, error) {
	bytes, err := sampleObcrawlerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-obcrawler.conf", size: 3060, mode: os.FileMode(420), modTime: time.Unix(1605028319, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-obcrawler.conf": sampleObcrawlerConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-obcrawler.conf": &bintree{sampleObcrawlerConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
